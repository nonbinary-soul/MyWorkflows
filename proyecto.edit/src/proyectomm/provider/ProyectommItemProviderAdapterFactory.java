/**
 */
package proyectomm.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import proyectomm.util.ProyectommAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ProyectommItemProviderAdapterFactory extends ProyectommAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProyectommItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.ProcesoDeNegocio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcesoDeNegocioItemProvider procesoDeNegocioItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.ProcesoDeNegocio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcesoDeNegocioAdapter() {
		if (procesoDeNegocioItemProvider == null) {
			procesoDeNegocioItemProvider = new ProcesoDeNegocioItemProvider(this);
		}

		return procesoDeNegocioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Actor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorItemProvider actorItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Actor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorAdapter() {
		if (actorItemProvider == null) {
			actorItemProvider = new ActorItemProvider(this);
		}

		return actorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.BaseDeDatos} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BaseDeDatosItemProvider baseDeDatosItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.BaseDeDatos}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBaseDeDatosAdapter() {
		if (baseDeDatosItemProvider == null) {
			baseDeDatosItemProvider = new BaseDeDatosItemProvider(this);
		}

		return baseDeDatosItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Tabla} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TablaItemProvider tablaItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Tabla}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTablaAdapter() {
		if (tablaItemProvider == null) {
			tablaItemProvider = new TablaItemProvider(this);
		}

		return tablaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Atributo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtributoItemProvider atributoItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Atributo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtributoAdapter() {
		if (atributoItemProvider == null) {
			atributoItemProvider = new AtributoItemProvider(this);
		}

		return atributoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Inicio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InicioItemProvider inicioItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Inicio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInicioAdapter() {
		if (inicioItemProvider == null) {
			inicioItemProvider = new InicioItemProvider(this);
		}

		return inicioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Fin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinItemProvider finItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Fin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinAdapter() {
		if (finItemProvider == null) {
			finItemProvider = new FinItemProvider(this);
		}

		return finItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Usuario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UsuarioItemProvider usuarioItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Usuario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUsuarioAdapter() {
		if (usuarioItemProvider == null) {
			usuarioItemProvider = new UsuarioItemProvider(this);
		}

		return usuarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Servicio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServicioItemProvider servicioItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Servicio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServicioAdapter() {
		if (servicioItemProvider == null) {
			servicioItemProvider = new ServicioItemProvider(this);
		}

		return servicioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Envio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvioItemProvider envioItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Envio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvioAdapter() {
		if (envioItemProvider == null) {
			envioItemProvider = new EnvioItemProvider(this);
		}

		return envioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Recepcion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecepcionItemProvider recepcionItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Recepcion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecepcionAdapter() {
		if (recepcionItemProvider == null) {
			recepcionItemProvider = new RecepcionItemProvider(this);
		}

		return recepcionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Borrado} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BorradoItemProvider borradoItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Borrado}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBorradoAdapter() {
		if (borradoItemProvider == null) {
			borradoItemProvider = new BorradoItemProvider(this);
		}

		return borradoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Lectura} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LecturaItemProvider lecturaItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Lectura}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLecturaAdapter() {
		if (lecturaItemProvider == null) {
			lecturaItemProvider = new LecturaItemProvider(this);
		}

		return lecturaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.PrimaryKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimaryKeyItemProvider primaryKeyItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.PrimaryKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimaryKeyAdapter() {
		if (primaryKeyItemProvider == null) {
			primaryKeyItemProvider = new PrimaryKeyItemProvider(this);
		}

		return primaryKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.ForeignKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForeignKeyItemProvider foreignKeyItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.ForeignKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForeignKeyAdapter() {
		if (foreignKeyItemProvider == null) {
			foreignKeyItemProvider = new ForeignKeyItemProvider(this);
		}

		return foreignKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proyectomm.Opcion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpcionItemProvider opcionItemProvider;

	/**
	 * This creates an adapter for a {@link proyectomm.Opcion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpcionAdapter() {
		if (opcionItemProvider == null) {
			opcionItemProvider = new OpcionItemProvider(this);
		}

		return opcionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (procesoDeNegocioItemProvider != null) procesoDeNegocioItemProvider.dispose();
		if (actorItemProvider != null) actorItemProvider.dispose();
		if (baseDeDatosItemProvider != null) baseDeDatosItemProvider.dispose();
		if (tablaItemProvider != null) tablaItemProvider.dispose();
		if (atributoItemProvider != null) atributoItemProvider.dispose();
		if (inicioItemProvider != null) inicioItemProvider.dispose();
		if (finItemProvider != null) finItemProvider.dispose();
		if (usuarioItemProvider != null) usuarioItemProvider.dispose();
		if (servicioItemProvider != null) servicioItemProvider.dispose();
		if (envioItemProvider != null) envioItemProvider.dispose();
		if (recepcionItemProvider != null) recepcionItemProvider.dispose();
		if (borradoItemProvider != null) borradoItemProvider.dispose();
		if (lecturaItemProvider != null) lecturaItemProvider.dispose();
		if (primaryKeyItemProvider != null) primaryKeyItemProvider.dispose();
		if (foreignKeyItemProvider != null) foreignKeyItemProvider.dispose();
		if (opcionItemProvider != null) opcionItemProvider.dispose();
	}

}
